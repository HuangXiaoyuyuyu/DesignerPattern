package behavioral_patterns.strategy.only_strategy;

/**
 * @Author OliverYu
 * @Date 2020/7/14 9:22 下午
 * @Email 253757635@qq.com
 * @Description 策略接口
 */
public interface SortStrategy {

    /**
     * 什么是策略：
     *      举个例子，在我们上学的时候，老师总会说这道题有多种解法，那么每一种解法就是一种策略；
     *              在我们出行的时候，可以选择多种交通工具，如：自行车、公交车、开车等，每一种出行方式就是一种策略；
     *              在我们需要对一组数据进行排序的时候，所使用的每一种排序算法就是一种策略。
     *
     * 什么是策略模式：
     *      定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。
     *
     * 策略模式的三个部分：
     *      环境类(Context)：用来操作策略的上下文环境
     *      抽象策略类(Strategy)：策略的抽象
     *      具体策略类(ConcreteStrategy)：具体的策略实现
     *
     * 优点：
     *      算法可以自由切换；
     *      避免使用多重条件判断(如果不用策略模式，我们可能会使用多重条件语句，不利于维护)；
     *      扩展性良好，增加一个策略只需要实现接口即可。
     *
     * 缺点：
     *      策略数量会增多，每一个策略都是一个类，复用的可能性很小；
     *      所有的策略类都需要对外暴露。
     *
     * 使用场景：
     *      多个类只有算法或行为上稍有不同的场景
     *      算法需要自由切换的场景
     *      需要屏蔽算法规则的场景
     *
     * 注意事项：
     *      如果一个系统的策略多于4个，就需要考虑使用混合模式来解决策略膨胀的问题。
     *
     */

    void sortStrategy();

}
