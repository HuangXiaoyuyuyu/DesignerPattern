package design_principles;

/**
 * @Author OliverYu
 * @Date 2020/7/18 4:58 下午
 * @Email 253757635@qq.com
 * @Description 开闭原则
 */
public class OpenClosePrinciple {

    /**
     * 开闭原则
     * 定义：一个软件实体类(如类、模块和函数) 应该对扩展开放，对修改关闭。
     *
     * 使用开闭原则的理由：
     *      1. 只要是面向对象编程，在开发过程中都会涉及开闭原则。
     *      2. 开闭原则是最基础的设计原则，其余的设计原则都是开闭原则的具体形态，
     *         按照Java语言的描述，开闭原则就是抽象类，而其余原则就是具体的实现类。
     *      3. 开闭原则可以提高复用性。
     *      4. 开闭原则可以提高维护性，在扩展的时候不去修改原有的代码。
     *
     * 如何使用开闭原则：
     *      1. 抽象约束：抽象是对一组事物的通用描述，没有具体的实现，也就是表示它可以有非常多的可能性，可以跟随需求的变化而变化。
     *                 因此，通过接口或者抽象类可以约束一组可能变化的行为，并且能够实现对扩展开放，其包含三层含义：
     *                 1)通过接口或者抽象类约束扩散，对扩展进行边界限定。
     *                 2)参数类型，引用对象尽量使用接口或者抽象类，而不是实现类，这主要是实现里氏替换原则的一个要求。
     *                 3)抽象类尽量保持稳定，一旦确定就不要修改。
     *      2. 封装变化：对变化的封装包含两层含义：
     *                 1)将相同的变化封装到一个接口或者抽象类中。
     *                 2)将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或者抽象类中。
     *
     */

}
