package design_principles;

/**
 * @Author OliverYu
 * @Date 2020/7/20 11:13 下午
 * @Email 253757635@qq.com
 * @Description 里氏替换原则
 */
public class LiskovSubstitutionPrinciple {

    /**
     * 里氏替换原则
     * 定义：子类可以扩展父类的功能，但是不能改变父类原有的功能
     *
     * 具体描述：
     *      1. 子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象的方法。
     *      2. 子类中可以增加自己特有的方法。
     *      3. 当子类的方法重载父类的方法时，方法的前置条件(即方法的输入/入参)要比父类方法的输入参数更宽松。
     *      4. 当子类的方法实现父类的方法时(重写/重载或实现抽象方法)，方法的后置条件(即方法的输出/返回值)要比父类严格或相等。
     *
     * 优点：
     *      1. 代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性。
     *      2. 提高代码的重用性。
     *      3. 子类可以形似父类，但又异于父类。
     *      4. 提高代码的可扩展性。
     *      5. 提高产品或项目的开放性。
     *
     * 缺点：
     *      1. 继承是侵入性的，只要继承，就必须拥有父类的属性和方法。
     *      2. 降低代码灵活性，子类必须拥有父类的属性和方法，让子类自由的世界中多了一些约束。
     *      3. 增强耦合性，当父类的常量、变量和方法被修改时，需要考虑子类的修改，
     *         而且在缺乏规范的情况下，这种修改可能带来非常糟糕的结果--大段的代码需要重构。
     */

}
