package design_principles;

/**
 * @Author OliverYu
 * @Date 2020/7/16 11:42 下午
 * @Email 253757635@qq.com
 * @Description 单一职责原则
 */
public class SingleResponsibilityPrinciple {

    /**
     * 单一职责原则
     * 定义：一个类应该只有一个发生变化的原因
     *
     * 描述：单一职责原则简称SRP，也就是说一个类只负责一个职责，使得类的职责更加单一，
     *      如果一个类有一个以上的职责，那么这些职责将会耦合在一起，导致设计变得脆弱，
     *      当一个职责发生变化时，可能会影响其他的职责，
     *      另外职责过多会影响代码的复用性。
     *
     * 优点：降低代码的粒度，降低类的复杂性。
     *      每个类的职责明确，提升可读性。
     *      提高可维护性，容易定位bug所在位置。
     *      降低更改代码所引起的风险。
     *
     * 难点：职责划分无量化标准，需要考虑的因素太多。
     *      单一职责在项目中很少得以体现。
     *
     * 建议：
     *      1. 接口一定要做到SRP，类的设计尽量做到只有一个原因引起变化。
     *      2. 妥协原则：
     *              1). 只有逻辑足够简单，才可以在代码级别上违背SRP；
     *              2). 只有类中的方法数量足够少，才可以在方法级别上违背SRP；
     *              3). 一旦发生职责扩散而需要修改类时，除非类本身非常简单，否则还是需要遵循SRP。
     */

}
